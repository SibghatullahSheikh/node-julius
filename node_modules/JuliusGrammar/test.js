var JuliusData = require('JuliusGrammar')
  , MeCab = require('mecab-async')
  , mecab = new MeCab()
  , kana2voca = require('kana2voca').sync;

String.prototype.toVoca = function() {
	var result = mecab.parseSync( this.toString() );
	var kana = '';
	for (var i in result) {
		kana += result[i][9];
	}
	return kana2voca(kana);
}

function num2kanji(num)
{
	if (num === 0) return 'ゼロ';
	if (num >= 10000000000000000) return '無理でした';
	var numKanji    = ['', '一', '二', '三', '四', '五', '六', '七', '八', '九']
	  , ketaKanji   = ['', '十', '百', '千']
	  , kuraiKanji  = ['', '万', '億', '兆']
	  , resultKanji = ''
	;
	if (num < 0) {
		resultKanji += 'マイナス';
		num *= -1;
	}
	// 92
	var keta  = num.toString().length
	  , kurai = 0
	;
	while (num > 0) {
		var k = keta - num.toString().length
		  , x = num%10
		  , c = (k%4 === 0) ? kurai : 0
		;
		if (k%4 === 0) ++kurai;
		if (x === 0)          k = 0; // ０のつく桁は省く
		if (k > 0 && x === 1) x = 0; // 一桁目以外は '一' を省く
		resultKanji = numKanji[x] + ketaKanji[k%4] + kuraiKanji[c] + resultKanji;
		num = Math.floor(num/10);
	}
	return resultKanji;
}

var gram = new JuliusData();
var nums = [], symNums = [];
for (var i = 0; i <= 100; ++i) {
	nums.push( num2kanji(i) );
	symNums.push(i);
}
gram.addSymbol('NUMBER', nums, symNums);
gram.add('ほげ(ふが|ほげ)');
gram.add('<NUMBER>時<NUMBER>分');
gram.mkdfa(function(err, result) {
	if (err) throw err;
	gram.test(function(err, result) {
		if (err) throw err;
		console.log(result.stdout);
	});
});
